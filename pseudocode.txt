PSEUDOCODE: Skincare Analysis and Recommendation System

FUNCTIONS

def readSpreadsheet(link):
    • Input: Link to a spreadsheet containing the data
    • Converts the hyperlink to a dataframe
    • Output: dataframe containing the data 
    return df

def cleanData(df):
    • Input: dataframe containing the dataset 
    • Cleans the dataset by handling missing values, formatting inconsistencies, and duplicates
    • Removes rows with invalid values (e.g., 'visit the store', '#NAME?', 'No info' in the ingredient column)
    • Output: cleaned dataframe
    return df

def statFinder(df):
    • Input: cleaned dataframe
    • Finds the maximum rating under each product type (e.g., sunscreen, moisturizer)
    • Outputs the name of the corresponding brand + product for the highest-rated product under each type
    • Computes summary statistics for product prices (using `sp.stats.describe(df['price'])`)
    • Outputs: 
        - Dataframe with summary statistics (e.g., mean, min, max price) and highest-rated products
        - Chi-squared test results to check if price and rating are correlated
    return statdf

def priceOutliers(df):
    • Input: cleaned dataframe
    • Identifies price outliers using z-score
    • Plots a histogram of the price column
    • Outputs:
        - List of high-priced products
        - List of low-priced products
    return highList, lowList

def ingredientAnalyser(df):
    • Input: cleaned dataframe
    • Identifies most common active ingredients (except water/aqua, glycerin, Phenoxyethanol, Butylene Glycol)
    • Outputs:
        - Dictionary of most common ingredients for each product type
        - Dictionary of most common ingredients for each skin type
    return dict1, dict2

def ingredientEncoding(df):
    • Input: cleaned dataframe
    • Converts ingredient lists into binary columns using Ingredient Set Encoding
    • Outputs:
        - Encoded dataframe with binary columns for each ingredient
    return df_encoded

def kFinder(df_encoded):
    • Input: encoded dataframe
    • Finds the optimal k value using the elbow method for K-means clustering
    • Output: optimal K value
    return kValue.elbow

def applyKMeansClustering(df_encoded, k):
    • Input: encoded dataframe and optimal K value
    • Applies K-means clustering to group products by ingredient composition
    • Outputs:
        - Cluster labels for each product
        - Cluster centers
    return cluster_labels, cluster_centers

def clusterVisualisation(df_encoded, cluster_labels):
    • Input: encoded dataframe and cluster labels
    • Uses PCA for dimensionality reduction (2D space) to visualize product clusters
    • Outputs:
        - A plot visualizing products clustered by ingredient similarity
    return

def fungalAcneTriggers(df_encoded, productname):
    • Input: encoded dataframe and product name
    • Compares ingredients of the product with a pre-defined list of fungal acne triggers
    • Outputs:
        - List of fungal acne triggers for the inputted product
    return triggerdf

def recommendationSystem(df_encoded, productname, k):
    • Input: encoded dataframe, product name, and optimal K value
    • Uses K-means clustering to find products with similar formulations
    • Filters products by product type and skin suitability
    • Outputs:
        - Dataframe with similar products, sorted by price, and including fungal acne trigger information
    return df

def main():
    • Runs all the functions sequentially to provide outputs such as:
        - Statistics
        - Outliers
        - Common ingredients
        - Product recommendations

UNIT TESTS

statFinder(df)
    • Test by value: Check if the maximum rating and summary statistics match expected results for a known dataset
    • Test by value: Verify the chi-squared test results by comparing them with a synthetic dataset

priceOutliers(df)
    • Test by value: Confirm high and low outliers are detected correctly
    • Test by type: Verify the output is a tuple with two lists (high and low outliers)

ingredientEncoding(df)
    • Test by value: Check if the binary encoding of ingredients works as expected
    • Test by value: Ensure that different ingredient list lengths are handled properly

recommendationSystem(df_encoded, productname, k)
    • Test by length: Ensure the recommendation list has the correct number of products for a given input
    • Test by value: Check if recommended products match expected values

PREDICTED OUTPUTS OF PROGRAM

1. **Statistics:**
    • Dataframe with highest ratings and price stats (mean, min, max)
    • Chi-squared test result
    • Bar graph comparing mean prices across product types
    • Histogram of product prices
    • Lists of high-priced and low-priced products
    • Two lists: most common ingredients by product type and by skin type

2. **Clustering & Recommendations:**
    • PCA plot showing products grouped by ingredient similarity
    • Dataframe with recommended products, sorted by price, and fungal acne triggers
